[${NVM_DIR:-"$HOME/.nvm"}]
lib =
    nvm_install_dir() {
      printf %s "${NVM_DIR:-"$HOME/.nvm"}"
    }
    nvm_init() {
      local INSTALL_DIR
      INSTALL_DIR="$(nvm_install_dir)"
      local LATEST_VERSION
      LATEST_VERSION="$(command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" describe --abbrev=0 --tags --match "v[0-9]*" origin)"
      command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" checkout -f --quiet "$LATEST_VERSION"
      if [ ! -z "$(command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" show-ref refs/heads/master)" ]; then
        if command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch --quiet 2>/dev/null; then
          command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch --quiet -D master >/dev/null 2>&1
        else
          echo >&2 "Your version of git is out of date. Please update it!"
          command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" branch -D master >/dev/null 2>&1
        fi
      fi
      echo "=> Compressing and cleaning up git repository"
      if ! command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" reflog expire --expire=now --all; then
        echo >&2 "Your version of git is out of date. Please update it!"
      fi
      if ! command git --git-dir="$INSTALL_DIR"/.git --work-tree="$INSTALL_DIR" gc --auto --aggressive --prune=now ; then
        echo >&2 "Your version of git is out of date. Please update it!"
      fi
    }
checkout = git clone --recursive https://github.com/creationix/nvm.git "$(nvm_install_dir)" 2> /dev/null
post_checkout = nvm_init
update = git --git-dir="$(nvm_install_dir)"/.git --work-tree="$(nvm_install_dir)" fetch origin 2> /dev/null
post_update = nvm_init
push = echo "Not owner"
status = echo "Not owner"
